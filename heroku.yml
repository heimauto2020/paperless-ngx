# ──────────────────────────────────────────────
# Add-ons, die beim ersten Deploy automatisch
# provisioniert werden
addons:
  - plan: heroku-redis:hobby-dev
    as: REDIS

# ──────────────────────────────────────────────
# Build-Phase (Container-Stack wird automatisch
# erkannt, weil wir ein Docker-Image angeben)
build:
  docker:
    web: Dockerfile        # nutzt das Dockerfile im Projekt-Root

# ──────────────────────────────────────────────
# Process-Types (Dynos)
run:
  # Haupt-Web-Dyno
  web: /usr/local/bin/gunicorn paperless.asgi:application --bind 0.0.0.0:$PORT

  # Celery-Worker – verwendet dasselbe Image wie "web"
  worker:
    image: web
    command:
      - celery
      - -A
      - paperless
      - worker
      - -l
      - info

  # Redis-Broker
  broker:
    image: docker.io/library/redis:8
    command:
      - redis-server
      - --port
      - "6379"

  # Gotenberg-Service (Chromium/PDF-Konvertierung)
  gotenberg:
    image: docker.io/gotenberg/gotenberg:8.20
    command:
      - gotenberg
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"

  # Apache Tika-Service
  tika:
    image: docker.io/apache/tika:latest

# ──────────────────────────────────────────────
# Release-Phase (DB-Migrationen)
release:
  image: web
  command:
    - python
    - manage.py
    - migrate

# ──────────────────────────────────────────────
# Config-Vars (werden als ENV-Variablen gesetzt)
config:
  PAPERLESS_REDIS: ${REDIS_URL}
  PAPERLESS_DBENGINE: postgresql
  PAPERLESS_DBHOST: ${EXTERNAL_DB_HOST}
  PAPERLESS_DBPORT: ${EXTERNAL_DB_PORT}
  PAPERLESS_DBUSER: ${EXTERNAL_DB_USER}
  PAPERLESS_DBPASS: ${EXTERNAL_DB_PASSWORD}
  PAPERLESS_TIKA_ENABLED: "1"
  PAPERLESS_TIKA_GOTENBERG_ENDPOINT: http://gotenberg:3000
  PAPERLESS_TIKA_ENDPOINT: http://tika:9998
  PAPERLESS_CONSUME_DIR: /mnt/gdrive/${USERNAME}/consume
  PAPERLESS_EXPORT_DIR: /mnt/gdrive/${USERNAME}/export
